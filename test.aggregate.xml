<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<query xmlns="http://uzh.ch/ddis/katts/query">

	<!-- Send a heart beat every 100 milliseconds. -->
	<heartBeat interval="100" />

	<!-- Before the query is deployed the data files are copied to all nodes with rsync. -->
	<fileSource id="tickerSource">
		<files>
			<file csvFieldDelimiter="," mimeType="text/comma-separated-values" path="data/test.aggregate.triples" />
		</files>
	</fileSource>

	<!-- Pre-Filters for the ticker data -->
	<tripleFilter applyOnSource="tickerSource" id="TripleFilter_TickerPRC">
		<conditions>
			<condition restriction="PRC" item="predicate" /> <!-- ticker price -->
		</conditions>
		<produces>
			<stream id="tickerPrice">
				<variable type="xs:double" name="ticker_price" referencesTo="object" />
				<variable type="xs:string" name="ticker_id" referencesTo="subject" />
			</stream>
		</produces>
	</tripleFilter>
	<tripleFilter applyOnSource="tickerSource" id="TripleFilter_TickerCOMNAM">
		<conditions>
			<condition restriction="COMNAM" item="predicate" /> <!-- company name -->
		</conditions>
		<produces>
			<stream id="tickerCompanyName">
				<variable type="xs:string" name="company_name" referencesTo="object" />
				<variable type="xs:string" name="ticker_id" referencesTo="subject" />
			</stream>
		</produces>
	</tripleFilter>
	<tripleFilter applyOnSource="tickerSource" id="TripleFilter_TICKER">
		<conditions>
			<condition restriction="TICKER" item="predicate" /> <!-- ticker symbol -->
		</conditions>
		<produces>
			<stream id="tickerSymbol">
				<variable type="xs:string" name="ticker_symbol" referencesTo="object" />
				<variable type="xs:string" name="ticker_id" referencesTo="subject" />
			</stream>
		</produces>
	</tripleFilter>
	<tripleFilter applyOnSource="tickerSource" id="TripleFilter_DEPARTMENT">
    <conditions>
      <condition restriction="DEPARTMENT" item="predicate" /> <!-- ticker symbol -->
    </conditions>
    <produces>
      <stream id="tickerDepartment">
        <variable type="xs:string" name="ticker_department" referencesTo="object" />
        <variable type="xs:string" name="ticker_id" referencesTo="subject" />
      </stream>
    </produces>
  </tripleFilter>

	<oneFieldJoin maxBufferSize="20" joinPrecision="20000" joinOn="ticker_id" id="Ticker_Join">
		<consumes>
			<stream maxBufferSize="5" streamId="tickerSymbol">
				<variableGrouping>
					<groupOn variableName="ticker_id" />
				</variableGrouping>
			</stream>
			<stream maxBufferSize="5" streamId="tickerPrice">
				<variableGrouping>
					<groupOn variableName="ticker_id" />
				</variableGrouping>
			</stream>
			<stream maxBufferSize="5" streamId="tickerCompanyName">
				<variableGrouping>
					<groupOn variableName="ticker_id" />
				</variableGrouping>
			</stream>
			<stream maxBufferSize="5" streamId="tickerDepartment">
        <variableGrouping>
          <groupOn variableName="ticker_id" />
        </variableGrouping>
      </stream>
		</consumes>
		<produces>
			<stream id="tickerStream">
				<variable type="xs:string" name="ticker_symbol" referencesTo="ticker_symbol" />
				<variable type="xs:double" name="ticker_price" referencesTo="ticker_price" />
				<variable type="xs:string" name="company_name" referencesTo="company_name" />
				<variable type="xs:string" name="ticker_department" referencesTo="ticker_department" />
			</stream>
		</produces>
	</oneFieldJoin>

  <aggregate groupBy="ticker_symbol,ticker_department" windowSize="P1D" every="P1D" onlyIfChanged="true" parallelism="1">
    <consumes>
      <stream maxBufferSize="5" streamId="tickerStream">
        <variableGrouping>
          <groupOn variableName="ticker_symbol" />
        </variableGrouping>
      </stream>
    </consumes>
    
    <aggregators>
      <sum of="ticker_price" as="teh_sum" />
    </aggregators>
    
    <produces>
      <stream id="summedTickerStream">
        <variable type="xs:string" name="ticker_symbol" referencesTo="ticker_symbol" />
        <variable type="xs:string" name="ticker_department" referencesTo="ticker_department" />
        <variable type="xs:double" name="ticker_sum" referencesTo="teh_sum" />
      </stream>
    </produces>
  </aggregate>

	<fileOutput filePath="data/output.csv" id="fileOutput">
		<consumes>
			<stream maxBufferSize="5" streamId="summedTickerStream">
				<shuffleGrouping />
			</stream>
		</consumes>
	</fileOutput>

	<termination />

</query>