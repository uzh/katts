<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<query xmlns="http://uzh.ch/ddis/katts/query">
    
    <!-- Before the query is deployed the data files are copied to all nodes with rsync. -->
    <fileSource id="tickerSource">
        <files>
            <file csvFieldDelimiter="," mimeType="text/comma-separated-values" path="data/ticker.csv.gz"/>
        </files>
    </fileSource>
    
    <fileSource id="contractSource">
        <files>
            <file csvFieldDelimiter="," mimeType="text/comma-separated-values" path="data/contracts.csv.gz"/>
        </files>
    </fileSource>
    
    
    <!-- Pre-Filters for the ticker data -->
    <tripleFilter groupOn="subject" applyOnSource="tickerSource" id="TripleFilter_TickerPRC">
        <conditions>
            <condition restriction="PRC" item="predicate"/> <!-- ticker price -->
        </conditions>
        <produces>
            <stream id="tickerPrice">
                <variable type="xs:double" name="ticker_price" referencesTo="object"/>
                <variable type="xs:string" name="ticker_id" referencesTo="subject"/>
            </stream>
        </produces>
    </tripleFilter>
    <tripleFilter groupOn="subject" applyOnSource="tickerSource" id="TripleFilter_TickerCOMNAM">
        <conditions>
            <condition restriction="COMNAM" item="predicate"/> <!-- company name -->
        </conditions>
        <produces>
            <stream id="tickerCompanyName">
                <variable type="xs:string" name="company_name" referencesTo="object"/>
                <variable type="xs:string" name="ticker_id" referencesTo="subject"/>
            </stream>
        </produces>
    </tripleFilter>
    <tripleFilter groupOn="subject" applyOnSource="tickerSource" id="TripleFilter_TICKER">
        <conditions>
            <condition restriction="TICKER" item="predicate"/> <!-- ticker symbol -->
        </conditions>
        <produces>
            <stream id="tickerSymbol">
                <variable type="xs:string" name="ticker_symbol" referencesTo="object"/>
                <variable type="xs:string" name="ticker_id" referencesTo="subject"/>
            </stream>
        </produces>
    </tripleFilter>
   
   
    <!-- Pre-Filters for contract data -->
    <tripleFilter groupOn="subject" applyOnSource="contractSource" id="TripleFilter_ContractAgency">
        <conditions>
            <condition restriction="agencyid" item="predicate"/> <!-- agency -->
        </conditions>
        <produces>
            <stream id="contractAgency">
                <variable type="xs:string" name="agency_name" referencesTo="object"/>
                <variable type="xs:string" name="contract_id" referencesTo="subject"/>
            </stream>
        </produces>
    </tripleFilter>
    <tripleFilter groupOn="subject" applyOnSource="contractSource" id="TripleFilter_ContractAmount">
        <conditions>
            <condition restriction="obligatedamount" item="predicate"/> <!-- contract amount -->
        </conditions>
        <produces>
            <stream id="contractAmount">
                <variable type="xs:double" name="contract_amount" referencesTo="object"/>
                <variable type="xs:string" name="contract_id" referencesTo="subject"/>
            </stream>
        </produces>
    </tripleFilter>
    <tripleFilter groupOn="subject" applyOnSource="contractSource" id="TripleFilter_ContractCompany">
        <conditions>
            <condition restriction="vendorname" item="predicate"/> <!-- Contractor -->
        </conditions>
        <produces>
            <stream id="contractCompany">
                <variable type="xs:string" name="company_name" referencesTo="object"/>
                <variable type="xs:string" name="contract_id" referencesTo="subject"/>
            </stream>
        </produces>
    </tripleFilter>
    
    <!-- Join the ticker data together -->
    <temporalJoin id="TemporalJoin_Ticker">
        <consumes>
            <stream maxBufferSize="5" streamId="tickerSymbol">
                <variableGrouping>
                    <groupOn variableName="ticker_id"/>
                </variableGrouping>
            </stream>
            <stream maxBufferSize="5" streamId="tickerPrice">
                <variableGrouping>
                    <groupOn variableName="ticker_id"/>
                </variableGrouping>
            </stream>
            <stream maxBufferSize="5" streamId="tickerCompanyName">
                <variableGrouping>
                    <groupOn variableName="ticker_id"/>
                </variableGrouping>
            </stream>
        </consumes>
        
        <evictBefore>
          <evict from="*" on="*" if="#from.endDate lt #on.startDate"/>
        </evictBefore>
        
        <!-- join condition -->
        <sameValue onField="ticker_id"/>
                
        <evictAfter>
          <!-- <evict from="*" on="*" if="#from.endDate lt #on.startDate"/> -->
        </evictAfter>
                
        <produces>
            <stream id="tickerStream">
                <variable type="xs:string" name="ticker_symbol" referencesTo="ticker_symbol"/>
                <variable type="xs:double" name="ticker_price" referencesTo="ticker_price"/>
                <variable type="xs:string" name="company_name" referencesTo="company_name"/>
            </stream>
        </produces>
    </temporalJoin>    
   
       
    <!-- Join together contract data -->
    <temporalJoin id="TemporalJoin_Contract">
        <consumes>
            <stream maxBufferSize="5" streamId="contractAgency">
                <variableGrouping>
                    <groupOn variableName="contract_id"/>
                </variableGrouping>
            </stream>
            <stream maxBufferSize="5" streamId="contractAmount">
                <variableGrouping>
                    <groupOn variableName="contract_id"/>
                </variableGrouping>
            </stream>
            <stream maxBufferSize="5" streamId="contractCompany">
                <variableGrouping>
                    <groupOn variableName="contract_id"/>
                </variableGrouping>
            </stream>
        </consumes>
        
        <evictBefore>
          <evict from="*" on="*" if="#from.endDate lt #on.startDate"/>
        </evictBefore>
        
        <!-- join condition -->
        <sameValue onField="contract_id"/>
        
        <evictAfter>
          <!-- <evict from="*" on="*" if="#from.endDate lt #on.startDate"/> -->
        </evictAfter>
                
        <produces>
            <stream id="contractStream">
                <variable type="xs:string" name="contract_id" referencesTo="contract_id"/>
                <variable type="xs:double" name="contract_amount" referencesTo="contract_amount"/>
                <variable type="xs:string" name="company_name" referencesTo="company_name"/>
                <variable type="xs:string" name="contract_agency" referencesTo="agency_name"/>
            </stream>
        </produces>
    </temporalJoin>    
    


    <partitioner slideSize="P1D" windowSize="P20D" partitionOn="ticker_symbol" aggregateOn="ticker_price" id="Partitioner">
        <consumes>
            <stream maxBufferSize="5" streamId="tickerStream">
                <variableGrouping>
                    <groupOn variableName="ticker_symbol"/>
                </variableGrouping>
            </stream>
        </consumes>
        <produces>
            <stream inheritFrom="tickerStream" id="tickerStreamMinMax">
                <variable type="xs:double" name="ticker_min" referencesTo="min"/>
                <variable type="xs:double" name="ticker_max" referencesTo="max"/>
            </stream>
        </produces>
        <components>
            <minPartitioner/>
            <maxPartitioner/>
        </components>
    </partitioner>



    <expressionFunction expression="#ticker_max / #ticker_min" id="expressionFunction">
        <consumes>
            <stream maxBufferSize="5" streamId="tickerStreamMinMax">
                <variableGrouping>
                    <groupOn variableName="ticker_symbol"/>
                </variableGrouping>
            </stream>
        </consumes>
        <produces>
            <stream inheritFrom="tickerStreamMinMax" id="tickerStreamfct">
                <variable type="xs:double" name="ticker_fct" referencesTo="result"/>
            </stream>
        </produces>
    </expressionFunction>



    <expressionFilter expression="#ticker_fct > 1" id="expressionFilter">
        <consumes>
            <stream maxBufferSize="5" streamId="tickerStreamfct">
                <variableGrouping>
                    <groupOn variableName="ticker_symbol"/>
                </variableGrouping>
            </stream>
        </consumes>
        <produces>
            <stream inheritFrom="tickerStreamfct" id="filteredTickerStream"/>
        </produces>
    </expressionFilter>
    
    
	<!--  Join together ticker and contract data -->
    <temporalJoin id="TemporalJoin_TickerAndContractData">
        <consumes>
            <stream maxBufferSize="5" streamId="contractStream">
                <variableGrouping>
                    <groupOn variableName="company_name"/>
                </variableGrouping>
            </stream>
            <stream maxBufferSize="5" streamId="filteredTickerStream">
                <variableGrouping>
                    <groupOn variableName="company_name"/>
                </variableGrouping>
            </stream>
        </consumes>
        
        <evictBefore>
          <evict from="*" on="*" if="#from.endDate lt #on.startDate"/>
        </evictBefore>
        
        <sameValue onField="company_name"/>
        
        <evictAfter>
          <evict from="*" on="*" if="#from.endDate + 20 lt #on.startDate"/>
        </evictAfter>
                
        <produces>
            <stream id="tickerAndContractStream">
                <variable type="xs:string" name="ticker_symbol" referencesTo="ticker_symbol"/>
                <variable type="xs:string" name="company_name" referencesTo="company_name"/>
                <variable type="xs:string" name="ticker_fct" referencesTo="ticker_fct"/>
            </stream>
        </produces>
    </temporalJoin>   



    <fileOutput filePath="data/output.csv" id="fileOutput">
        <consumes>
            <stream maxBufferSize="5" streamId="tickerAndContractStream">
                <shuffleGrouping/>
            </stream>
        </consumes>
    </fileOutput>
</query>